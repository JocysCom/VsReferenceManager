<ResourceDictionary
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:JcControls="clr-namespace:JocysCom.ClassLibrary.Controls"
	xmlns:sys="clr-namespace:System;assembly=mscorlib">

	<!--  Colors  -->

	<SolidColorBrush x:Key="SolidColorBrush_BFF">#ff000000</SolidColorBrush>

	<!--  Window  -->

	<Style x:Key="Window_Default" TargetType="Window">
		<Setter Property="SnapsToDevicePixels" Value="True" />
		<Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
	</Style>

	<!--  UserControl  -->

	<Style x:Key="UserControl_Default" TargetType="UserControl">
		<Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
	</Style>

	<!--  Grid  -->

	<Style x:Key="Grid_Default" TargetType="Grid">
		<Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
	</Style>

	<!--  GridSplitter  -->

	<Style x:Key="GridSplitterHorizontal" TargetType="GridSplitter">
		<Setter Property="Padding" Value="0,0,0,0" />
		<Setter Property="HorizontalAlignment" Value="Stretch" />
		<Setter Property="VerticalAlignment" Value="Stretch" />
		<Setter Property="ResizeBehavior" Value="PreviousAndNext" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type GridSplitter}">
					<Grid>
						<StackPanel Margin="3" VerticalAlignment="Center" Orientation="Vertical">
							<StackPanel.LayoutTransform>
								<RotateTransform Angle="0" />
							</StackPanel.LayoutTransform>
							<Canvas Width="28" Height="3">
								<Ellipse
									Canvas.Left="0"
									Width="3"
									Height="3"
									Fill="LightGray" />
								<Ellipse
									Canvas.Left="6"
									Width="3"
									Height="3"
									Fill="LightGray" />
								<Ellipse
									Canvas.Left="12"
									Width="3"
									Height="3"
									Fill="LightGray" />
								<Ellipse
									Canvas.Left="18"
									Width="3"
									Height="3"
									Fill="LightGray" />
								<Ellipse
									Canvas.Left="24"
									Width="3"
									Height="3"
									Fill="LightGray" />
							</Canvas>
						</StackPanel>
						<StackPanel Height="1" VerticalAlignment="Top" Background="{DynamicResource {x:Static SystemColors.ActiveBorderBrushKey}}" />
						<StackPanel Height="1" VerticalAlignment="Bottom" Background="{DynamicResource {x:Static SystemColors.ActiveBorderBrushKey}}" />
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="GridSplitterVertical" TargetType="GridSplitter">
		<Setter Property="Padding" Value="0,0,0,0" />
		<Setter Property="HorizontalAlignment" Value="Stretch" />
		<Setter Property="VerticalAlignment" Value="Stretch" />
		<Setter Property="ResizeBehavior" Value="PreviousAndNext" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type GridSplitter}">
					<Grid>
						<StackPanel Margin="3" VerticalAlignment="Center" Orientation="Vertical">
							<StackPanel.LayoutTransform>
								<RotateTransform Angle="90" />
							</StackPanel.LayoutTransform>
							<Canvas Width="28" Height="3">
								<Ellipse
									Canvas.Left="0"
									Width="3"
									Height="3"
									Fill="LightGray" />
								<Ellipse
									Canvas.Left="6"
									Width="3"
									Height="3"
									Fill="LightGray" />
								<Ellipse
									Canvas.Left="12"
									Width="3"
									Height="3"
									Fill="LightGray" />
								<Ellipse
									Canvas.Left="18"
									Width="3"
									Height="3"
									Fill="LightGray" />
								<Ellipse
									Canvas.Left="24"
									Width="3"
									Height="3"
									Fill="LightGray" />
							</Canvas>
						</StackPanel>
						<StackPanel Width="1" HorizontalAlignment="Left" Background="{DynamicResource {x:Static SystemColors.ActiveBorderBrushKey}}" />
						<StackPanel Width="1" HorizontalAlignment="Right" Background="{DynamicResource {x:Static SystemColors.ActiveBorderBrushKey}}" />
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!--  DockPanel  -->
	<!--

	<Style TargetType="DockPanel">
		<Setter Property="Margin" Value="8" />
	</Style>

	-->

	<!--  MenuItem  -->

	<Style x:Key="MenuItem_Default" TargetType="MenuItem">
		<Setter Property="HorizontalContentAlignment" Value="Left" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
	</Style>

	<!--  StackPanel  -->

	<Style x:Key="Container" TargetType="StackPanel">
		<Setter Property="Margin" Value="0" />
	</Style>

	<Style x:Key="ButtonStackPanel" TargetType="StackPanel">
		<Setter Property="Margin" Value="3,1,3,1" />
		<Setter Property="Orientation" Value="Horizontal" />
		<Setter Property="IsHitTestVisible" Value="False" />
	</Style>

	<!--  Button  -->

	<Style x:Key="Button_Default" TargetType="Button">
		<Setter Property="Height" Value="Auto" />
		<Setter Property="Margin" Value="3,3,3,3" />
		<Setter Property="Padding" Value="3,3,3,3" />
		<Setter Property="MinWidth" Value="75" />
		<Setter Property="VerticalAlignment" Value="Center" />
		<Style.Triggers>
			<Trigger Property="IsEnabled" Value="False">
				<Setter Property="Opacity" Value="0.5" />
			</Trigger>
		</Style.Triggers>
	</Style>

	<!--  Button -ToolBar  -->

	<Style x:Key="ToolBarButton" TargetType="Button">
		<Setter Property="Margin" Value="0,0,0,0" />
		<Style.Triggers>
			<Trigger Property="IsEnabled" Value="False">
				<Setter Property="Opacity" Value="0.5" />
			</Trigger>
		</Style.Triggers>
	</Style>

	<!--  TabItem  -->


	<Style x:Key="TabItem_Default" TargetType="TabItem" />

	<!--<Style BasedOn="{StaticResource TabItem_Default}" TargetType="TabItem" />-->


	<!--  TabControl  -->

	<Style x:Key="TabControl_Default" TargetType="TabControl">
		<Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
		<Setter Property="SnapsToDevicePixels" Value="True" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type TabControl}">
					<Grid KeyboardNavigation.TabNavigation="Local">
						<Grid.RowDefinitions>
							<RowDefinition Height="Auto" />
							<RowDefinition Height="*" />
						</Grid.RowDefinitions>
						<TabPanel
							x:Name="HeaderPanel"
							Grid.Row="0"
							Margin="0,0,0,-1"
							Panel.ZIndex="1"
							IsItemsHost="True" />
						<Border
							x:Name="Border"
							Grid.Row="1"
							BorderBrush="{DynamicResource {x:Static SystemColors.ActiveBorderBrushKey}}"
							BorderThickness="1,1,1,1"
							KeyboardNavigation.DirectionalNavigation="Contained"
							KeyboardNavigation.TabIndex="2"
							KeyboardNavigation.TabNavigation="Local">
							<ContentPresenter Margin="0" ContentSource="SelectedContent" />
						</Border>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Resources>
			<JcControls:TabIndexConverter x:Key="TabIndexConverter" />
			<Style TargetType="TabItem">
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="TabItem">
							<Border Name="TiBorder" BorderBrush="{DynamicResource {x:Static SystemColors.ActiveBorderBrushKey}}" BorderThickness="1,1,1,1">
								<ContentPresenter
									Name="TiContent"
									HorizontalAlignment="Center"
									VerticalAlignment="Center"
									ContentSource="Header" />
							</Border>
							<ControlTemplate.Triggers>
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="False" />
										<Condition Binding="{Binding Converter={StaticResource TabIndexConverter}, RelativeSource={RelativeSource Self}}" Value="First" />
									</MultiDataTrigger.Conditions>
									<MultiDataTrigger.Setters>
										<Setter TargetName="TiBorder" Property="BorderThickness" Value="1,1,1,1" />
									</MultiDataTrigger.Setters>
								</MultiDataTrigger>
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="True" />
										<Condition Binding="{Binding Converter={StaticResource TabIndexConverter}, RelativeSource={RelativeSource Self}}" Value="FirstSelected" />
									</MultiDataTrigger.Conditions>
									<MultiDataTrigger.Setters>
										<Setter TargetName="TiBorder" Property="BorderThickness" Value="1,1,1,0" />
									</MultiDataTrigger.Setters>
								</MultiDataTrigger>
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="False" />
										<Condition Binding="{Binding Converter={StaticResource TabIndexConverter}, RelativeSource={RelativeSource Self}}" Value="" />
									</MultiDataTrigger.Conditions>
									<MultiDataTrigger.Setters>
										<Setter TargetName="TiBorder" Property="BorderThickness" Value="0,1,1,1" />
									</MultiDataTrigger.Setters>
								</MultiDataTrigger>
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="True" />
										<Condition Binding="{Binding Converter={StaticResource TabIndexConverter}, RelativeSource={RelativeSource Self}}" Value="Selected" />
									</MultiDataTrigger.Conditions>
									<MultiDataTrigger.Setters>
										<Setter TargetName="TiBorder" Property="BorderThickness" Value="0,1,1,0" />
									</MultiDataTrigger.Setters>
								</MultiDataTrigger>
								<Trigger Property="IsSelected" Value="True">
									<Setter TargetName="TiContent" Property="Margin" Value="6,3,6,4" />
									<Setter TargetName="TiBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" />
								</Trigger>
								<Trigger Property="IsSelected" Value="False">
									<Setter TargetName="TiContent" Property="Margin" Value="6,3,6,3" />
									<Setter TargetName="TiBorder" Property="Background">
										<Setter.Value>
											<LinearGradientBrush StartPoint="1,0" EndPoint="1,1">
												<GradientStop Offset="0" Color="{DynamicResource {x:Static SystemColors.ControlColorKey}}" />
												<GradientStop Offset="1" Color="{DynamicResource {x:Static SystemColors.ControlLightColorKey}}" />
											</LinearGradientBrush>
										</Setter.Value>
									</Setter>
								</Trigger>
								<MultiTrigger>
									<MultiTrigger.Conditions>
										<Condition Property="IsMouseOver" Value="True" />
										<Condition Property="IsSelected" Value="False" />
									</MultiTrigger.Conditions>
									<MultiTrigger.Setters>
										<Setter TargetName="TiBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.GradientInactiveCaptionBrushKey}}" />
									</MultiTrigger.Setters>
								</MultiTrigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
		</Style.Resources>
	</Style>

	<!--  TextBox  -->

	<Style x:Key="TextBox_Default" TargetType="TextBox">
		<Setter Property="Height" Value="Auto" />
		<Setter Property="Margin" Value="3,3,3,3" />
		<Setter Property="Padding" Value="1,3,1,3" />
		<Setter Property="VerticalAlignment" Value="Center" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<!--<Setter Property="MinWidth" Value="120" />-->
		<Style.Triggers>
			<Trigger Property="IsReadOnly" Value="True">
				<Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
			</Trigger>
		</Style.Triggers>
	</Style>

	<!--  TextBox - ResultsLog  -->

	<Style x:Key="TextBoxResultsLog" BasedOn="{StaticResource TextBox_Default}" TargetType="TextBox">
		<Setter Property="HorizontalAlignment" Value="Stretch" />
		<Setter Property="VerticalAlignment" Value="Stretch" />
		<Setter Property="VerticalContentAlignment" Value="Top" />
		<Setter Property="AcceptsReturn" Value="True" />
		<Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
		<Setter Property="FontFamily" Value="Consolas" />
		<Setter Property="MinLines" Value="5" />
		<Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled" />
		<Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
		<Setter Property="TextWrapping" Value="Wrap" />
		<Setter Property="MinLines" Value="5" />
	</Style>

	<!--  TextBox - Cell  -->

	<Style x:Key="TextBoxCell" BasedOn="{StaticResource TextBox_Default}" TargetType="TextBox">
		<Setter Property="BorderThickness" Value="0" />
		<Setter Property="Height" Value="Auto" />
		<Setter Property="Padding" Value="1,4,1,2" />
		<Setter Property="Margin" Value="0,0,0,0" />
		<Setter Property="VerticalAlignment" Value="Center" />
	</Style>

	<Style x:Key="TextBoxRightCell" BasedOn="{StaticResource TextBoxCell}" TargetType="TextBox">
		<Setter Property="HorizontalAlignment" Value="Stretch" />
		<Setter Property="TextAlignment" Value="Right" />
	</Style>

	<Style x:Key="TextBoxCenterCell" BasedOn="{StaticResource TextBoxCell}" TargetType="TextBox">
		<Setter Property="HorizontalAlignment" Value="Stretch" />
		<Setter Property="TextAlignment" Value="Center" />
	</Style>

	<!--  TextBlock  -->

	<Style x:Key="TextBlock_Default" TargetType="TextBlock">
		<Setter Property="Height" Value="Auto" />
		<Setter Property="Margin" Value="3,3,3,3" />
		<Setter Property="Padding" Value="3,3,3,3" />
		<Setter Property="VerticalAlignment" Value="Center" />
	</Style>

	<!--<Style BasedOn="{StaticResource TextBlock_Default}" TargetType="TextBlock" />-->


	<!--  TextBlock - Cell  -->

	<Style x:Key="TextBlockCell" BasedOn="{StaticResource TextBlock_Default}" TargetType="TextBlock">
		<Setter Property="Padding" Value="3,4,3,2" />
		<Setter Property="Margin" Value="0,0,0,0" />
	</Style>

	<Style x:Key="TextBlockLeftCell" BasedOn="{StaticResource TextBlockCell}" TargetType="TextBlock">
		<Setter Property="HorizontalAlignment" Value="Stretch" />
		<Setter Property="TextAlignment" Value="Left" />
		<Setter Property="VerticalAlignment" Value="Center" />
	</Style>

	<Style x:Key="TextBlockRightCell" BasedOn="{StaticResource TextBlockCell}" TargetType="TextBlock">
		<Setter Property="HorizontalAlignment" Value="Stretch" />
		<Setter Property="TextAlignment" Value="Right" />
		<Setter Property="VerticalAlignment" Value="Center" />
	</Style>

	<Style x:Key="TextBlockCenterCell" BasedOn="{StaticResource TextBlockCell}" TargetType="TextBlock">
		<Setter Property="HorizontalAlignment" Value="Stretch" />
		<Setter Property="TextAlignment" Value="Center" />
		<Setter Property="VerticalAlignment" Value="Center" />
	</Style>


	<!--  DataGrid  -->

	<Style x:Key="DataGrid_Default" TargetType="DataGrid">
		<Setter Property="BorderThickness" Value="0" />
		<Setter Property="CanUserAddRows" Value="False" />
		<Setter Property="CanUserDeleteRows" Value="False" />
		<Setter Property="GridLinesVisibility" Value="Horizontal" />
		<Setter Property="HeadersVisibility" Value="Column" />
		<Setter Property="HorizontalGridLinesBrush" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
		<Setter Property="VerticalGridLinesBrush" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
		<Setter Property="VerticalScrollBarVisibility" Value="Auto" />
		<Style.Resources>
			<!--  Make selected row color of inactive grid as same as active grid.  -->
			<SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightBrushKey}" Color="{x:Static SystemColors.HighlightColor}" />
			<SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightTextBrushKey}" Color="{x:Static SystemColors.HighlightTextColor}" />
			<!--  Other styles  -->
			<Style TargetType="DataGridColumnHeader">
				<Setter Property="Padding" Value="3,3,3,3" />
				<Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
				<Setter Property="Background">
					<Setter.Value>
						<LinearGradientBrush StartPoint="1,0" EndPoint="1,1">
							<GradientStop Offset="0" Color="{DynamicResource {x:Static SystemColors.WindowColorKey}}" />
							<GradientStop Offset="1" Color="{DynamicResource {x:Static SystemColors.ControlColorKey}}" />
						</LinearGradientBrush>
					</Setter.Value>
				</Setter>
				<Setter Property="BorderThickness" Value="1,0,0,0" />
				<Style.Triggers>
					<!--  Apply style to first column only  -->
					<Trigger Property="DisplayIndex" Value="0">
						<Setter Property="BorderThickness" Value="0,0,0,0" />
					</Trigger>
				</Style.Triggers>
			</Style>
			<Style TargetType="DataGridCell">
				<Setter Property="Padding" Value="3,3,3,3" />
				<Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
				<Setter Property="BorderThickness" Value="1,0,0,0" />
				<Style.Triggers>
					<!--  Apply style to first column only  -->
					<DataTrigger Binding="{Binding Column.DisplayIndex, RelativeSource={RelativeSource Self}}" Value="0">
						<Setter Property="BorderThickness" Value="0,0,0,0" />
					</DataTrigger>
				</Style.Triggers>
			</Style>
		</Style.Resources>
	</Style>

	<Style x:Key="DataGridReadOnly" BasedOn="{StaticResource DataGrid_Default}" TargetType="DataGrid">
		<Setter Property="RowBackground" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
		<Setter Property="IsReadOnly" Value="true" />
		<Setter Property="BorderThickness" Value="1,0,0,0" />
		<Setter Property="GridLinesVisibility" Value="All" />
		<Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" />
		<Setter Property="HorizontalGridLinesBrush" Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" />
		<Setter Property="VerticalGridLinesBrush" Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" />
	</Style>

	<!--  DataGridTextColumn  -->
	<!--

	<Style BasedOn="{DynamicResource DataGridTextColumnDefault}" TargetType="DataGridTextColumn" />

	-->
	<!--  ComboBox  -->


	<Style x:Key="ComboBox_Default" TargetType="ComboBox">
		<Setter Property="Margin" Value="3,3,3,3" />
		<Setter Property="VerticalAlignment" Value="Center" />
	</Style>

	<!--  ComboBox - Grid  -->

	<Style x:Key="ComboBoxGrid" BasedOn="{StaticResource ComboBox_Default}" TargetType="ComboBox">
		<Setter Property="Padding" Value="3,3,3,3" />
		<Setter Property="Margin" Value="3,3,3,3" />
		<Setter Property="HorizontalAlignment" Value="Left" />
		<Setter Property="VerticalAlignment" Value="Center" />
	</Style>


	<!--  CheckBox  -->


	<Style x:Key="CheckBox_Default" TargetType="CheckBox">
		<Setter Property="Margin" Value="3,3,3,3" />
		<Setter Property="Padding" Value="3,3,3,3" />
		<Setter Property="Height" Value="Auto" />
		<Setter Property="VerticalAlignment" Value="Center" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
	</Style>

	<!--<Style BasedOn="{StaticResource CheckBox_Default}" TargetType="CheckBox" />-->


	<!--  CheckBox - Cell  -->


	<Style x:Key="CheckBoxCell" BasedOn="{StaticResource CheckBox_Default}" TargetType="CheckBox">
		<Setter Property="Margin" Value="3,0,3,0" />
		<Setter Property="Padding" Value="0,0,0,0" />
		<Setter Property="VerticalAlignment" Value="Center" />
	</Style>


	<!--  ContentControl  -->

	<Style x:Key="ButtonContentControl" TargetType="ContentControl">
		<Setter Property="Margin" Value="0,2,0,2" />
		<Setter Property="Padding" Value="0,0,0,0" />
		<Setter Property="Width" Value="16" />
		<Setter Property="Height" Value="16" />
	</Style>

	<!--  Label  -->

	<Style x:Key="ButtonLabel" TargetType="Label">
		<Setter Property="Margin" Value="0,0,0,0" />
		<Setter Property="Padding" Value="4,2,4,2" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="HorizontalContentAlignment" Value="Center" />
		<Setter Property="MinWidth" Value="48" />
	</Style>

	<Style x:Key="LabelGrid" TargetType="Label">
		<Setter Property="Padding" Value="4,2,4,2" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
	</Style>

	<!--  ToolBarPanel  -->

	<Style x:Key="MainToolBarPanel" TargetType="ToolBarPanel">
		<Setter Property="HorizontalAlignment" Value="Stretch" />
		<Setter Property="VerticalAlignment" Value="Top" />
		<Setter Property="ClipToBounds" Value="True" />
		<Setter Property="Margin" Value="0,0,0,0" />
	</Style>

	<!--  ToolBar  -->

	<Style x:Key="MainToolBar" TargetType="ToolBar">
		<Setter Property="Margin" Value="-1,-0,-12,-1" />
		<Setter Property="Padding" Value="0,0,0,0" />
		<Setter Property="ToolBar.OverflowMode" Value="Never" />
		<Setter Property="ToolBarTray.IsLocked" Value="True" />
		<Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
		<Style.Resources>
			<Style x:Key="ToolBarMainPanelBorderStyle" TargetType="{x:Type Border}">
				<Setter Property="CornerRadius" Value="0,0,0,0" />
			</Style>
		</Style.Resources>
	</Style>

	<!--  Separator  -->

	<Style x:Key="MainSeparator" TargetType="Separator">
		<Setter Property="Margin" Value="1,3,1,3" />
		<Setter Property="Focusable" Value="false" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Separator}">
					<Border
						VerticalAlignment="Stretch"
						Background="{TemplateBinding Background}"
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}"
						SnapsToDevicePixels="true" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!--  GroupBox  -->

	<Style x:Key="GroupBox_Default" TargetType="GroupBox">
		<Setter Property="Margin" Value="3" />
		<Setter Property="HeaderTemplate">
			<Setter.Value>
				<DataTemplate>
					<TextBlock Background="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" Style="{StaticResource TextBlock_Default}" Text="{Binding}" />
				</DataTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!--  Default Styles  -->

	<Style BasedOn="{StaticResource Window_Default}" TargetType="Window" />
	<Style BasedOn="{StaticResource UserControl_Default}" TargetType="UserControl" />
	<Style BasedOn="{StaticResource Grid_Default}" TargetType="Grid" />
	<Style BasedOn="{StaticResource GroupBox_Default}" TargetType="GroupBox" />
	<Style BasedOn="{StaticResource TabControl_Default}" TargetType="TabControl" />
	<Style BasedOn="{StaticResource DataGrid_Default}" TargetType="DataGrid" />
	<Style BasedOn="{StaticResource TextBox_Default}" TargetType="TextBox" />
	<Style BasedOn="{StaticResource ComboBox_Default}" TargetType="ComboBox" />
	<Style BasedOn="{StaticResource Button_Default}" TargetType="Button" />
	<Style BasedOn="{StaticResource CheckBox_Default}" TargetType="CheckBox" />
	<Style BasedOn="{StaticResource MenuItem_Default}" TargetType="MenuItem" />

</ResourceDictionary>
